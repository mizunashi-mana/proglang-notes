@book{Girard:1989,
author = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
booktitle = {Cambridge University Press},
doi = {10.5555/64805},
isbn = {978-0-521-37181-0},
month = {apr},
publisher = {Cambridge University Press},
title = {{Proofs and Types}},
url = {https://dl.acm.org/doi/book/10.5555/64805},
year = {1989}
}

@article{Rossberg:2014,
abstract = {ML modules are a powerful language mechanism for decomposing programs into reusable components. Unfortunately, they also have a reputation for being “complex” and requiring fancy type theory that is mostly opaque to non-experts. While this reputation is certainly understandable, given the many non-standard methodologies that have been developed in the process of studying modules, we aim here to demonstrate that it is undeserved. To do so, we present a novel formalization of ML modules, which defines their semantics directly by a compositional “elaboration” translation into plain System F $\omega$ (the higher-order polymorphic $\lambda$-calculus). To demonstrate the scalability of our “F-ing” semantics, we use it to define a representative, higher-order ML-style module language, encompassing all the major features of existing ML module dialects (except for recursive modules). We thereby show that ML modules are merely a particular mode of use of System F $\omega$ .},
author = {Rossberg, Andreas and Russo, Claudio and Dreyer, Derek},
doi = {10.1017/S0956796814000264},
issn = {0956-7968},
journal = {Journal of Functional Programming},
month = {sep},
number = {5},
pages = {529--607},
title = {{F-ing modules}},
url = {https://www.cambridge.org/core/product/identifier/S0956796814000264/type/journal{\_}article},
volume = {24},
year = {2014}
}

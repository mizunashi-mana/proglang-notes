@book{Girard:1989,
author = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
booktitle = {Cambridge University Press},
doi = {10.5555/64805},
isbn = {978-0-521-37181-0},
month = {apr},
publisher = {Cambridge University Press},
title = {{Proofs and Types}},
url = {https://dl.acm.org/doi/book/10.5555/64805},
year = {1989}
}

@article{Rossberg:2014,
author = {Rossberg, Andreas and Russo, Claudio and Dreyer, Derek},
doi = {10.1017/S0956796814000264},
issn = {0956-7968},
journal = {Journal of Functional Programming},
month = {sep},
number = {5},
pages = {529--607},
title = {{F-ing modules}},
url = {https://www.cambridge.org/core/product/identifier/S0956796814000264/type/journal{\_}article},
volume = {24},
year = {2014}
}

@article{Selinger:2001,
author = {Selinger, Peter},
doi = {10.1017/S096012950000311X},
issn = {09601295},
journal = {Mathematical Structures in Computer Science},
month = {apr},
number = {2},
pages = {207--260},
title = {{Control categories and duality: on the categorical semantics of the lambda-mu calculus}},
url = {http://www.journals.cambridge.org/abstract{\_}S096012950000311X},
volume = {11},
year = {2001}
}

@incollection{Rocheteau:2005,
archivePrefix = {arXiv},
arxivId = {arXiv:0706.1728v1},
author = {Rocheteau, J{\'{e}}r{\^{o}}me},
booktitle = {Term Rewriting and Applications},
doi = {10.1007/978-3-540-32033-3_16},
editor = {Giesl, J{\"u}rgen},
eprint = {arXiv:0706.1728v1},
issn = {03029743},
pages = {204--218},
publisher = {Springer, Berlin, Heidelberg},
title = {{Lambda-Mu-Calculus and Duality: Call-by-Name and Call-by-Value}},
url = {http://link.springer.com/10.1007/978-3-540-32033-3_16},
volume = {3467},
year = {2005}
}

@article{Ford:2004,
author = {Ford, Bryan},
doi = {10.1145/982962.964011},
issn = {0362-1340},
journal = {ACM SIGPLAN Notices},
keywords = {BNF,Context-free grammars,GTDPL,Lexical analysis,Packrat parsing,Parsing expression grammars,Regular expressions,Scannerless parsing,Syntactic predicates,TDPL,Unified grammars},
month = {jan},
number = {1},
pages = {111--122},
title = {{Parsing Expression Grammars: A Recognition-Based Syntactic Foundation}},
url = {https://dl.acm.org/doi/10.1145/982962.964011},
volume = {39},
year = {2004}
}

@mastersthesis{Ford:2002,
author = {Ford, Bryan},
school = {Massachusetts Institute of Technology},
title = {{Packrat Parsing : a Practical Linear-Time Algorithm with Backtracking}},
url = {https://pdos.csail.mit.edu/$\sim$baford/packrat/thesis/thesis.pdf},
year = {2002}
}

@article{Knuth:1965,
author = {Knuth, Donald E.},
doi = {10.1016/S0019-9958(65)90426-2},
issn = {00199958},
journal = {Information and Control},
month = {dec},
number = {6},
pages = {607--639},
title = {{On the translation of languages from left to right}},
url = {https://linkinghub.elsevier.com/retrieve/pii/S0019995865904262},
volume = {8},
year = {1965}
}

@misc{SimonMarlow:2010,
author = {{Simon Marlow}},
institution = {Cambridge},
keywords = {Haskell},
title = {{Haskell 2010 Language Report}},
url = {https://www.haskell.org/onlinereport/haskell2010/},
year = {2010}
}

@article{Mizushima:2008,
author = {Kota Mizushima and Atusi Maeda and Yoshinori Yamaguchi},
issn = {0387-5806},
issue = {SIG1(PRO35)},
journal = {情報処理学会論文誌  (IPSJ Journal)},
pages = {117-126},
title = {Improvement Technique of Memory Efficiency of Packrat Parsing},
volume = {49},
url = {https://jglobal.jst.go.jp/en/detail?JGLOBAL_ID=200902209111853132},
year = {2008},
}

@inproceedings{Mizushima:2010,
author = {Kota Mizushima and Atusi Maeda and Yoshinori Yamaguchi},
city = {New York, New York, USA},
doi = {10.1145/1806672.1806679},
isbn = {9781450300827},
booktitle = {Proceedings of the 9th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering - PASTE '10},
pages = {29},
publisher = {ACM Press},
title = {Packrat parsers can handle practical grammars in mostly constant space},
url = {http://portal.acm.org/citation.cfm?doid=1806672.1806679},
year = {2010},
}

@article{Lee:1998,
doi = {10.1145/291891.291892},
issn = {0164-0925},
issue = {4},
author = {Oukseh Lee and Kwangkeun Yi},
journal = {ACM Transactions on Programming Languages and Systems},
month = {7},
pages = {707-723},
title = {Proofs about a folklore let-polymorphic type inference algorithm},
volume = {20},
url = {https://dl.acm.org/doi/10.1145/291891.291892},
year = {1998},
}

@incollection{Eekelen:2004,
author = {Van Eekelen and Van Leer},
doi = {10.7551/mitpress/1104.003.0016},
booktitle = {Advanced Topics in Types and Programming Languages},
publisher = {The MIT Press},
title = {The Essence of ML Type Inference},
url = {https://direct.mit.edu/books/book/2718/chapter/73516/the-essence-of-ml-type-inference},
year = {2004},
chapter = {10},
}

@misc{Grabmuller:2006,
  author = {Martin Grabmüller},
  title = {Algorithm W Step by Step},
  year = {2006},
}

@article{Wells:1999,
  author = {J.B. Wells},
  doi = {10.1016/S0168-0072(98)00047-5},
  issn = {01680072},
  issue = {1-3},
  journal = {Annals of Pure and Applied Logic},
  keywords = {KPJWII&: System F,Lambda calculus,Semi-umfication,Typability: Type checking,Type inference},
  month = {6},
  pages = {111-156},
  title = {Typability and type checking in System F are equivalent and undecidable},
  volume = {98},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0168007298000475},
  year = {1999},
}

@article{Martelli:1982,
  author = {Alberto Martelli and Ugo Montanari},
  doi = {10.1145/357162.357169},
  issn = {0164-0925},
  issue = {2},
  journal = {ACM Transactions on Programming Languages and Systems},
  keywords = {123 [Artifi-cial Intelligence]: Deduction and Theorem Proving-resolution General Terms: Algorithms, Languages, Performance, Theory,F22 [Analysis of Algorithms and Problem Complexity]: Nonnumerical Algorithms and Problems-complexity of proof procedures,F41 [Mathematical Logic and Formal Languages]: Mathematical Logic-mechanical theorem proving},
  month = {4},
  pages = {258-282},
  title = {An Efficient Unification Algorithm},
  volume = {4},
  url = {https://dl.acm.org/doi/10.1145/357162.357169},
  year = {1982},
}

@article{Odersky:1999,
  author = {Martin Odersky and Martin Sulzmann and Martin Wehr},
  doi = {10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4},
  issn = {1074-3227},
  issue = {1},
  journal = {Theory and Practice of Object Systems},
  keywords = {constrained types,constraint solving,constraint systems,principal types,record types,subtypes,type inference},
  month = {1},
  pages = {35-55},
  title = {Type inference with constrained types},
  volume = {5},
  url = {http://doi.wiley.com/10.1002/%28SICI%291096-9942%28199901/03%295%3A1%3C35%3A%3AAID-TAPO4%3E3.0.CO%3B2-4},
  year = {1999},
}

@report{Sulzmann:1999,
  author = {Martin Sulzmann and Martin Müller and Christoph Zenger},
  institution = {University of South Australia, School of Computer and Information Science},
  keywords = {constraints,equational theories,term types,type inference},
  month = {7},
  title = {Hindley/Milner style type systems in constraint form},
  year = {1999},
}

@article{Vytiniotis:2011,
  author = {Dimitrios Vytiniotis and Simon Peyton Jones and Tom Schrijvers and Martin Sulzmann},
  doi = {10.1017/S0956796811000098},
  issn = {0956-7968},
  issue = {4-5},
  journal = {Journal of Functional Programming},
  month = {9},
  pages = {333-412},
  title = {OutsideIn(X): Modular type inference with local assumptions},
  volume = {21},
  url = {https://www.cambridge.org/core/product/identifier/S0956796811000098/type/journal_article},
  year = {2011},
}

@article{Jones:2007,
  author = {Simon Peyton Jones and Dimitrios Vytiniotis and Stephanie Weirich and Mark Shields},
  doi = {10.1017/S0956796806006034},
  issn = {0956-7968},
  issue = {1},
  journal = {Journal of Functional Programming},
  month = {1},
  pages = {1-82},
  title = {Practical type inference for arbitrary-rank types},
  volume = {17},
  url = {https://www.cambridge.org/core/product/identifier/S0956796806006034/type/journal_article},
  year = {2007},
}

@inproceedings{Dunfield:2013,
  city = {New York, NY, USA},
  doi = {10.1145/2500365.2500582},
  isbn = {9781450323260},
  journal = {Proceedings of the 18th ACM SIGPLAN international conference on Functional programming},
  keywords = {Bidirectional typechecking,Higher-rank polymorphism},
  month = {9},
  pages = {429-442},
  publisher = {ACM},
  title = {Complete and easy bidirectional typechecking for higher-rank polymorphism},
  url = {https://dl.acm.org/doi/10.1145/2500365.2500582},
  year = {2013},
  author = {Jana Danfield and Neelakantan R. Krishnaswami}
}

@article{Dijkstra:1978,
  title = {On-the-fly garbage collection: an exercise in cooperation},
  volume = {21},
  issn = {0001-0782, 1557-7317},
  shorttitle = {On-the-fly garbage collection},
  url = {https://dl.acm.org/doi/10.1145/359642.359655},
  doi = {10.1145/359642.359655},
  abstract = {As an example of cooperation between sequential processes with very little mutual interference despite frequent manipulations of a large shared data space, a technique is developed which allows nearly all of the activity needed for garbage detection and collection to be performed by an additional processor operating concurrently with the processor devoted to the computation proper. Exclusion and synchronization constraints have been kept as weak as could be achieved; the severe complexities engendered by doing so are illustrated.},
  language = {en},
  number = {11},
  urldate = {2023-05-22},
  journal = {Communications of the ACM},
  author = {Dijkstra, Edsger W. and Lamport, Leslie and Martin, A. J. and Scholten, C. S. and Steffens, E. F. M.},
  month = nov,
  year = {1978},
  pages = {966--975},
}

@inproceedings{Ueno:2011,
  address = {Tokyo Japan},
  title = {An efficient non-moving garbage collector for functional languages},
  isbn = {978-1-4503-0865-6},
  url = {https://dl.acm.org/doi/10.1145/2034773.2034802},
  doi = {10.1145/2034773.2034802},
  abstract = {Motivated by developing a memory management system that allows functional languages to seamlessly inter-operate with C, we propose an efﬁcient non-moving garbage collection algorithm based on bitmap marking and report its implementation and performance evaluation.},
  language = {en},
  urldate = {2023-01-28},
  booktitle = {Proceedings of the 16th {ACM} {SIGPLAN} international conference on {Functional} programming},
  publisher = {ACM},
  author = {Ueno, Katsuhiro and Ohori, Atsushi and Otomo, Toshiaki},
  month = sep,
  year = {2011},
  pages = {196--208},
}

@inproceedings{Gamari:2020,
  address = {London UK},
  title = {Alligator collector: a latency-optimized garbage collector for functional programming languages},
  isbn = {978-1-4503-7566-5},
  shorttitle = {Alligator collector},
  url = {https://dl.acm.org/doi/10.1145/3381898.3397214},
  doi = {10.1145/3381898.3397214},
  abstract = {Modern hardware and applications require runtime systems that can operate under large-heap and low-latency requirements. For many client/server or interactive applications, reducing average and maximum pause times is more important than maximizing throughput. The GHC Haskell runtime system version 8.10.1 offers a new latency-optimized garbage collector as an alternative to the existing throughput-optimized copying garbage collector. This paper details the latency-optimized GC design, which is a generational collector integrating GHC’s existing collector and bump-pointer allocator with a nonmoving collector and non-moving heap suggested by Ueno and Ohori. We provide an empirical analysis on the latency/throughput tradeoffs. We augment the established nofib micro benchmark with a response-time focused benchmark that simulates real-world applications such as LRU caches, web search, and key-value stores.},
  language = {en},
  urldate = {2023-01-28},
  booktitle = {Proceedings of the 2020 {ACM} {SIGPLAN} {International} {Symposium} on {Memory} {Management}},
  publisher = {ACM},
  author = {Gamari, Ben and Dietz, Laura},
  month = jun,
  year = {2020},
  pages = {87--99},
}

@inproceedings{Ueno:2016,
  address = {Nara Japan},
  title = {A fully concurrent garbage collector for functional programs on multicore processors},
  isbn = {978-1-4503-4219-3},
  url = {https://dl.acm.org/doi/10.1145/2951913.2951944},
  doi = {10.1145/2951913.2951944},
  language = {en},
  urldate = {2023-01-28},
  booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
  publisher = {ACM},
  author = {Ueno, Katsuhiro and Ohori, Atsushi},
  month = sep,
  year = {2016},
  pages = {421--433},
}

@incollection{Wilson:1995,
  address = {Berlin, Heidelberg},
  title = {Dynamic storage allocation: {A} survey and critical review},
  volume = {986},
  isbn = {978-3-540-60368-9 978-3-540-45511-0},
  shorttitle = {Dynamic storage allocation},
  url = {http://link.springer.com/10.1007/3-540-60368-9_19},
  language = {en},
  urldate = {2023-05-22},
  booktitle = {Memory {Management}},
  publisher = {Springer Berlin Heidelberg},
  author = {Wilson, Paul R. and Johnstone, Mark S. and Neely, Michael and Boles, David},
  editor = {Goos, Gerhard and Hartmanis, Juris and Leeuwen, Jan and Baler, Henry G.},
  year = {1995},
  doi = {10.1007/3-540-60368-9_19},
  note = {Series Title: Lecture Notes in Computer Science},
  pages = {1--116},
}

@inproceedings{Weirich:2013,
  address = {Boston Massachusetts USA},
  title = {System {FC} with explicit kind equality},
  isbn = {978-1-4503-2326-0},
  url = {https://dl.acm.org/doi/10.1145/2500365.2500599},
  doi = {10.1145/2500365.2500599},
  abstract = {System FC, the core language of the Glasgow Haskell Compiler, is an explicitly-typed variant of System F with ﬁrst-class type equality proofs called coercions. This extensible proof system forms the foundation for type system extensions such as type families (typelevel functions) and Generalized Algebraic Datatypes (GADTs). Such features, in conjunction with kind polymorphism and datatype promotion, support expressive compile-time reasoning.},
  language = {en},
  urldate = {2023-01-27},
  booktitle = {Proceedings of the 18th {ACM} {SIGPLAN} international conference on {Functional} programming},
  publisher = {ACM},
  author = {Weirich, Stephanie and Hsu, Justin and Eisenberg, Richard A.},
  month = sep,
  year = {2013},
  pages = {275--286},
}

@article{Rossberg:2018,
  title = {{1ML} – {Core} and modules united},
  volume = {28},
  copyright = {https://www.cambridge.org/core/terms},
  issn = {0956-7968, 1469-7653},
  url = {https://www.cambridge.org/core/product/identifier/S0956796818000205/type/journal_article},
  doi = {10.1017/S0956796818000205},
  abstract = {ML is two languages in one: there is the core, with types and expressions, and there are modules, with signatures, structures and functors. Modules form a separate, higher-order functional language on top of the core. There are both practical and technical reasons for this stratiﬁcation; yet, it creates substantial duplication in syntax and semantics, and it imposes seemingly unnecessary limits on expressiveness because it makes modules second-class citizens of the language. For example, selecting one among several possible modules implementing a given interface cannot be made a dynamic decision. Language extensions allowing modules to be packaged up as ﬁrst-class values have been proposed and implemented in different variations. However, they remedy expressiveness only to some extent and tend to be even more syntactically heavyweight than using second-class modules alone.},
  language = {en},
  urldate = {2024-11-09},
  journal = {Journal of Functional Programming},
  author = {Rossberg, Andreas},
  year = {2018},
  pages = {35--47},
}

@phdthesis{Levy:2001,
  type = {Doctor of {Philosophy}},
  title = {Call-{By}-{Push}-{Value}},
  url = {https://www.cs.bham.ac.uk/~pbl/papers/thesisqmwphd.pdf},
  language = {en},
  school = {University of London},
  author = {Levy, Paul Blain},
  year = {2001},
}

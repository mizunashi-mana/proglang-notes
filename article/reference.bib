@book{Girard:1989,
author = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
booktitle = {Cambridge University Press},
doi = {10.5555/64805},
isbn = {978-0-521-37181-0},
month = {apr},
publisher = {Cambridge University Press},
title = {{Proofs and Types}},
url = {https://dl.acm.org/doi/book/10.5555/64805},
year = {1989}
}

@article{Rossberg:2014,
abstract = {ML modules are a powerful language mechanism for decomposing programs into reusable components. Unfortunately, they also have a reputation for being “complex” and requiring fancy type theory that is mostly opaque to non-experts. While this reputation is certainly understandable, given the many non-standard methodologies that have been developed in the process of studying modules, we aim here to demonstrate that it is undeserved. To do so, we present a novel formalization of ML modules, which defines their semantics directly by a compositional “elaboration” translation into plain System F $\omega$ (the higher-order polymorphic $\lambda$-calculus). To demonstrate the scalability of our “F-ing” semantics, we use it to define a representative, higher-order ML-style module language, encompassing all the major features of existing ML module dialects (except for recursive modules). We thereby show that ML modules are merely a particular mode of use of System F $\omega$ .},
author = {Rossberg, Andreas and Russo, Claudio and Dreyer, Derek},
doi = {10.1017/S0956796814000264},
issn = {0956-7968},
journal = {Journal of Functional Programming},
month = {sep},
number = {5},
pages = {529--607},
title = {{F-ing modules}},
url = {https://www.cambridge.org/core/product/identifier/S0956796814000264/type/journal{\_}article},
volume = {24},
year = {2014}
}

@article{Selinger:2001,
abstract = {We give a categorical semantics to the call-by-name and call-by-value versions of Parigot's $\lambda$$\mu$-calculus with disjunction types. We introduce the class of control categories, which combine a cartesian-closed structure with a premonoidal structure in the sense of Power and Robinson. We prove, via a categorical structure theorem, that the categorical semantics is equivalent to a CPS semantics in the style of Hofmann and Streicher. We show that the call-by-name $\lambda$$\mu$-calculus forms an internal language for control categories, and that the call-by-value $\lambda$$\mu$-calculus forms an internal language for the dual co-control categories. As a corollary, we obtain a syntactic duality result: there exist syntactic translations between call-by-name and call-by-value that are mutually inverse and preserve the operational semantics. This answers a question of Streicher and Reus. {\textcopyright} 2001, Cambridge University Press. All rights reserved.},
author = {Selinger, Peter},
doi = {10.1017/S096012950000311X},
issn = {09601295},
journal = {Mathematical Structures in Computer Science},
month = {apr},
number = {2},
pages = {207--260},
title = {{Control categories and duality: on the categorical semantics of the lambda-mu calculus}},
url = {http://www.journals.cambridge.org/abstract{\_}S096012950000311X},
volume = {11},
year = {2001}
}

@incollection{Rocheteau:2005,
abstract = {Under the extension of Curry-Howard's correspondence to classical logic, Gentzen's NK and LK systems can be seen as syntaxdirected systems of simple types respectively for Parigot's $\lambda$$\mu$-calculus and Curien-Herbelin's $\lambda$̄$\mu$$\mu$̃-calculus. We aim at showing their computational equivalence. We define translations between these calculi. We prove simulation theorems for an undirected evaluation as well as for call-by-name and call-by-value evaluations. {\textcopyright} Springer-Verlag Berlin Heidelberg 2005.},
archivePrefix = {arXiv},
arxivId = {arXiv:0706.1728v1},
author = {Rocheteau, J{\'{e}}r{\^{o}}me},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/978-3-540-32033-3_16},
eprint = {arXiv:0706.1728v1},
issn = {03029743},
pages = {204--218},
title = {{$\lambda$$\mu$-Calculus and Duality: Call-by-Name and Call-by-Value}},
url = {http://link.springer.com/10.1007/978-3-540-32033-3{\_}16},
volume = {3467},
year = {2005}
}
